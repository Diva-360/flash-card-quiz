import React, { useState } from 'react';
import { Plus, Edit2, Trash2, ChevronLeft, ChevronRight, RotateCcw } from 'lucide-react';

const FlashcardQuizApp = () => {
  const [flashcards, setFlashcards] = useState([
    { id: 1, question: "What is the capital of France?", answer: "Paris" },
    { id: 2, question: "What is 2 + 2?", answer: "4" },
    { id: 3, question: "Who painted the Mona Lisa?", answer: "Leonardo da Vinci" }
  ]);
  
  const [currentIndex, setCurrentIndex] = useState(0);
  const [showAnswer, setShowAnswer] = useState(false);
  const [isEditing, setIsEditing] = useState(false);
  const [editingCard, setEditingCard] = useState(null);
  const [newQuestion, setNewQuestion] = useState('');
  const [newAnswer, setNewAnswer] = useState('');

  const currentCard = flashcards[currentIndex];

  const nextCard = () => {
    if (currentIndex < flashcards.length - 1) {
      setCurrentIndex(currentIndex + 1);
      setShowAnswer(false);
    }
  };

  const prevCard = () => {
    if (currentIndex > 0) {
      setCurrentIndex(currentIndex - 1);
      setShowAnswer(false);
    }
  };

  const addFlashcard = () => {
    if (newQuestion.trim() && newAnswer.trim()) {
      const newCard = {
        id: Math.max(...flashcards.map(card => card.id), 0) + 1,
        question: newQuestion.trim(),
        answer: newAnswer.trim()
      };
      setFlashcards([...flashcards, newCard]);
      setNewQuestion('');
      setNewAnswer('');
      setIsEditing(false);
    }
  };

  const editFlashcard = (card) => {
    setEditingCard(card);
    setNewQuestion(card.question);
    setNewAnswer(card.answer);
    setIsEditing(true);
  };

  const saveEdit = () => {
    if (newQuestion.trim() && newAnswer.trim()) {
      setFlashcards(flashcards.map(card => 
        card.id === editingCard.id 
          ? { ...card, question: newQuestion.trim(), answer: newAnswer.trim() }
          : card
      ));
      setEditingCard(null);
      setNewQuestion('');
      setNewAnswer('');
      setIsEditing(false);
    }
  };

  const deleteFlashcard = (id) => {
    const newFlashcards = flashcards.filter(card => card.id !== id);
    setFlashcards(newFlashcards);
    
    if (newFlashcards.length === 0) {
      setCurrentIndex(0);
    } else if (currentIndex >= newFlashcards.length) {
      setCurrentIndex(newFlashcards.length - 1);
    }
    setShowAnswer(false);
  };

  const cancelEdit = () => {
    setIsEditing(false);
    setEditingCard(null);
    setNewQuestion('');
    setNewAnswer('');
  };

  const resetCard = () => {
    setShowAnswer(false);
  };

  if (flashcards.length === 0) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 p-4">
        <div className="max-w-4xl mx-auto">
          <h1 className="text-4xl font-bold text-center text-gray-800 mb-8">Flashcard Quiz App</h1>
          
          <div className="bg-white rounded-xl shadow-lg p-8 text-center">
            <h2 className="text-2xl font-semibold text-gray-700 mb-4">No flashcards yet!</h2>
            <p className="text-gray-500 mb-6">Create your first flashcard to get started.</p>
            <button
              onClick={() => setIsEditing(true)}
              className="bg-blue-500 hover:bg-blue-600 text-white px-6 py-3 rounded-lg font-semibold transition-colors duration-200 flex items-center gap-2 mx-auto"
            >
              <Plus size={20} />
              Add First Flashcard
            </button>
          </div>

          {isEditing && (
            <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
              <div className="bg-white rounded-xl p-6 w-full max-w-md">
                <h3 className="text-xl font-semibold mb-4">Add New Flashcard</h3>
                <div className="space-y-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">Question</label>
                    <textarea
                      value={newQuestion}
                      onChange={(e) => setNewQuestion(e.target.value)}
                      className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-none"
                      rows="3"
                      placeholder="Enter your question..."
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">Answer</label>
                    <textarea
                      value={newAnswer}
                      onChange={(e) => setNewAnswer(e.target.value)}
                      className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-none"
                      rows="3"
                      placeholder="Enter the answer..."
                    />
                  </div>
                  <div className="flex gap-2 pt-2">
                    <button
                      onClick={addFlashcard}
                      disabled={!newQuestion.trim() || !newAnswer.trim()}
                      className="flex-1 bg-blue-500 hover:bg-blue-600 disabled:bg-gray-300 text-white py-2 px-4 rounded-lg font-semibold transition-colors duration-200"
                    >
                      Add Card
                    </button>
                    <button
                      onClick={cancelEdit}
                      className="flex-1 bg-gray-500 hover:bg-gray-600 text-white py-2 px-4 rounded-lg font-semibold transition-colors duration-200"
                    >
                      Cancel
                    </button>
                  </div>
                </div>
              </div>
            </div>
          )}
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 p-4">
      <div className="max-w-4xl mx-auto">
        <h1 className="text-4xl font-bold text-center text-gray-800 mb-8">Flashcard Quiz App</h1>
        
        {/* Card Counter */}
        <div className="text-center mb-6">
          <span className="bg-white px-4 py-2 rounded-full shadow-md text-gray-700 font-semibold">
            Card {currentIndex + 1} of {flashcards.length}
          </span>
        </div>

        {/* Flashcard */}
        <div className="bg-white rounded-xl shadow-lg p-8 mb-6 min-h-[300px] flex flex-col justify-center">
          <div className="text-center">
            <div className="mb-6">
              <h2 className="text-sm font-semibold text-gray-500 uppercase tracking-wide mb-2">
                {showAnswer ? 'Answer' : 'Question'}
              </h2>
              <p className="text-2xl font-medium text-gray-800 leading-relaxed">
                {showAnswer ? currentCard.answer : currentCard.question}
              </p>
            </div>
            
            <div className="flex justify-center gap-3">
              {!showAnswer ? (
                <button
                  onClick={() => setShowAnswer(true)}
                  className="bg-green-500 hover:bg-green-600 text-white px-6 py-3 rounded-lg font-semibold transition-colors duration-200"
                >
                  Show Answer
                </button>
              ) : (
                <button
                  onClick={resetCard}
                  className="bg-blue-500 hover:bg-blue-600 text-white px-6 py-3 rounded-lg font-semibold transition-colors duration-200 flex items-center gap-2"
                >
                  <RotateCcw size={18} />
                  Show Question
                </button>
              )}
            </div>
          </div>
        </div>

        {/* Navigation Controls */}
        <div className="flex justify-center gap-4 mb-6">
          <button
            onClick={prevCard}
            disabled={currentIndex === 0}
            className="bg-gray-500 hover:bg-gray-600 disabled:bg-gray-300 text-white px-4 py-2 rounded-lg font-semibold transition-colors duration-200 flex items-center gap-2"
          >
            <ChevronLeft size={20} />
            Previous
          </button>
          
          <button
            onClick={nextCard}
            disabled={currentIndex === flashcards.length - 1}
            className="bg-gray-500 hover:bg-gray-600 disabled:bg-gray-300 text-white px-4 py-2 rounded-lg font-semibold transition-colors duration-200 flex items-center gap-2"
          >
            Next
            <ChevronRight size={20} />
          </button>
        </div>

        {/* Card Management */}
        <div className="bg-white rounded-xl shadow-lg p-6">
          <h3 className="text-xl font-semibold mb-4 text-gray-800">Manage Flashcards</h3>
          
          <div className="flex flex-wrap gap-2 mb-4">
            <button
              onClick={() => setIsEditing(true)}
              className="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-lg font-semibold transition-colors duration-200 flex items-center gap-2"
            >
              <Plus size={18} />
              Add Card
            </button>
            
            <button
              onClick={() => editFlashcard(currentCard)}
              className="bg-yellow-500 hover:bg-yellow-600 text-white px-4 py-2 rounded-lg font-semibold transition-colors duration-200 flex items-center gap-2"
            >
              <Edit2 size={18} />
              Edit Current
            </button>
            
            <button
              onClick={() => deleteFlashcard(currentCard.id)}
              className="bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded-lg font-semibold transition-colors duration-200 flex items-center gap-2"
            >
              <Trash2 size={18} />
              Delete Current
            </button>
          </div>

          {/* All Cards List */}
          <div className="space-y-2 max-h-60 overflow-y-auto">
            {flashcards.map((card, index) => (
              <div
                key={card.id}
                className={`p-3 rounded-lg border cursor-pointer transition-colors duration-200 ${
                  index === currentIndex 
                    ? 'bg-blue-50 border-blue-300' 
                    : 'bg-gray-50 border-gray-200 hover:bg-gray-100'
                }`}
                onClick={() => {
                  setCurrentIndex(index);
                  setShowAnswer(false);
                }}
              >
                <div className="flex justify-between items-start">
                  <div className="flex-1">
                    <p className="font-medium text-gray-800 truncate">{card.question}</p>
                    <p className="text-sm text-gray-500 truncate">{card.answer}</p>
                  </div>
                  <div className="flex gap-1 ml-2">
                    <button
                      onClick={(e) => {
                        e.stopPropagation();
                        editFlashcard(card);
                      }}
                      className="p-1 text-yellow-600 hover:bg-yellow-100 rounded"
                    >
                      <Edit2 size={14} />
                    </button>
                    <button
                      onClick={(e) => {
                        e.stopPropagation();
                        deleteFlashcard(card.id);
                      }}
                      className="p-1 text-red-600 hover:bg-red-100 rounded"
                    >
                      <Trash2 size={14} />
                    </button>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>

        {/* Edit Modal */}
        {isEditing && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
            <div className="bg-white rounded-xl p-6 w-full max-w-md">
              <h3 className="text-xl font-semibold mb-4">
                {editingCard ? 'Edit Flashcard' : 'Add New Flashcard'}
              </h3>
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Question</label>
                  <textarea
                    value={newQuestion}
                    onChange={(e) => setNewQuestion(e.target.value)}
                    className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-none"
                    rows="3"
                    placeholder="Enter your question..."
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Answer</label>
                  <textarea
                    value={newAnswer}
                    onChange={(e) => setNewAnswer(e.target.value)}
                    className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-none"
                    rows="3"
                    placeholder="Enter the answer..."
                  />
                </div>
                <div className="flex gap-2 pt-2">
                  <button
                    onClick={editingCard ? saveEdit : addFlashcard}
                    disabled={!newQuestion.trim() || !newAnswer.trim()}
                    className="flex-1 bg-blue-500 hover:bg-blue-600 disabled:bg-gray-300 text-white py-2 px-4 rounded-lg font-semibold transition-colors duration-200"
                  >
                    {editingCard ? 'Save Changes' : 'Add Card'}
                  </button>
                  <button
                    onClick={cancelEdit}
                    className="flex-1 bg-gray-500 hover:bg-gray-600 text-white py-2 px-4 rounded-lg font-semibold transition-colors duration-200"
                  >
                    Cancel
                  </button>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default FlashcardQuizApp;
